/**
 * Одиночка — это порождающий паттерн, который гарантирует существование только одного объекта определённого класса,
 * а также позволяет достучаться до этого объекта из любого места программы.
 *
 * Одиночка имеет такие же преимущества и недостатки,
 * что и глобальные переменные. Его невероятно удобно использовать, но он нарушает модульность вашего кода.
 * Вы не сможете просто взять и использовать класс, зависящий от одиночки в другой программе.
 * Для этого придётся эмулировать присутствие одиночки и там.
 * Чаще всего эта проблема проявляется при написании юнит-тестов.
 *
 * Применимость: Многие программисты считают Одиночку антипаттерном, поэтому его всё реже
 * и реже можно встретить в Java-коде.
 *
 * Признаки применения паттерна: Одиночку можно определить по статическому создающему методу,
 * который возвращает один и тот же объект.
 *
 * Пример: Наивный Одиночка (один поток)
 * Топорно реализовать Одиночку очень просто — достаточно скрыть конструктор
 * и предоставить статический создающий метод.
 */
public class Main {
    public static void main(String[] args) {
        System.out.println("If you see the same value, then singleton was reused (yay!)" + "\n" +
                "If you see different values, then 2 singletons were created (booo!!)" + "\n\n" +
                "RESULT:" + "\n");
        Singleton singleton = Singleton.getInstance("FOO");
        Singleton anotherSingleton = Singleton.getInstance("BAR");
        System.out.println(singleton.value);
        System.out.println(anotherSingleton.value);
    }
}
