import devices.Device;
import devices.Radio;
import devices.Tv;
import remotes.AdvancedRemote;
import remotes.BasicRemote;

/**
 * Мост — это структурный паттерн проектирования,
 * который разделяет один или несколько классов на две отдельные иерархии — абстракцию и реализацию,
 * позволяя изменять их независимо друг от друга.
 *
 * Одна из этих иерархий (абстракция) получит ссылку на объекты другой иерархии (реализация)
 * и будет делегировать им основную работу.
 * Благодаря тому, что все реализации будут следовать общему интерфейсу, их можно будет взаимозаменять внутри абстракции.
 *
 * Применимость: Паттерн Мост особенно полезен когда вам приходится делать кросс-платформенные приложения,
 * поддерживать несколько типов баз данных или работать с разными поставщиками похожего API (например, cloud-сервисы, социальные сети и т. д.)
 *
 * Признаки применения паттерна: Если в программе чётко выделены классы «управления» и несколько видов классов «платформ»,
 * причём управляющие объекты делегируют выполнение платформам, то можно сказать, что у вас используется Мост.
 *
 * Пример: Мост между приборами и пультами дистанционного управления
 * Этот пример показывает разделение кода пультов дистанционного управления и бытовых приборов.
 * Пульты выступают «абстракцией», а приборы — «реализацией». Одни и те же приборы могут работать с разными пультами,
 * а пульты управлять разными устройствами.
 * Применив паттерн Мост, мы можем изменять классы пультов и приборов независимо друг от друга.
 */
public class Main {

    public static void main(String[] args) {
        testDevice(new Tv());
        testDevice(new Radio());
    }

    public static void testDevice(Device device) {
        System.out.println("Tests with basic remote.");
        BasicRemote basicRemote = new BasicRemote(device);
        basicRemote.power();
        device.printStatus();

        System.out.println("Tests with advanced remote.");
        AdvancedRemote advancedRemote = new AdvancedRemote(device);
        advancedRemote.power();
        advancedRemote.mute();
        device.printStatus();
    }
}
