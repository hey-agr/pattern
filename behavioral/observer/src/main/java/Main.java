import editor.Editor;
import listeners.EmailNotificationListener;
import listeners.LogOpenListener;

/**
 * Наблюдатель — это поведенческий паттерн,
 * который позволяет объектам оповещать другие объекты об изменениях своего состояния.
 * При этом наблюдатели могут свободно подписываться и отписываться от этих оповещений.
 *
 * Применимость:
 * Наблюдатель можно часто встретить в Java коде, особенно там,
 * где применяется событийная модель отношений между компонентами.
 * Наблюдатель позволяет отдельным компонентам реагировать на события, происходящие в других компонентах.
 *
 * Признаки применения паттерна:
 * Наблюдатель можно определить по механизму подписки и методам оповещения, которые вызывают компоненты программы.
 *
 * Пример: Подписка и оповещения
 * В этом примере Наблюдатель используется для передачи событий между объектами текстового редактора.
 * Всякий раз когда объект редактора меняет своё состояние, он оповещает своих наблюдателей.
 * Объекты EmailNotificationListener и LogOpenListener следят за этими уведомлениями
 * и выполняют полезную работу в ответ.
 *
 * Классы подписчиков не связаны с классом редактора и могут быть повторно использованы
 * в других приложениях если потребуется. Класс Editor зависит только от общего интерфейса подписчиков.
 * Это позволяет добавлять новые типы подписчиков не меняя существующего кода редактора.
 */
public class Main {
    public static void main(String[] args) {
        Editor editor = new Editor();
        editor.events.subscribe("open", new LogOpenListener("/path/to/log/file.txt"));
        editor.events.subscribe("save", new EmailNotificationListener("admin@example.com"));

        try {
            editor.openFile("test.txt");
            editor.saveFile();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
